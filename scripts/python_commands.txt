from dynamic_graph.sot.torque_control.test_estimator import *
(estimator,torque_ctrl,traj_gen,ctrl_manager,inv_dyn,pos_ctrl) = main_pre_start_pwm(robot,dt=0.001,delay=0.01);
dump_signal_to_file([robot.device.currents, estimator.jointsTorques, robot.device.control], 16, 'signals.txt', 100, 0.1)
ros = main_post_start(robot, estimator, torque_ctrl, traj_gen, ctrl_manager, inv_dyn, None);

robot.device.control.value = 30*(0.0,)

j = 8
kp_pos[:] = 0
pos_ctrl.Kp.value = tuple(kp_pos)
q = list(robot.device.robotState.value)
pos_ctrl.base6d_encoders.value = tuple(q)
traj_gen.base6d_encoders.value = tuple(q)
traj_gen.startTriangle('lhp', q[6+j]+0.1, 5)
kp_pos[j] = 1
pos_ctrl.Kp.value = tuple(kp_pos)
q[6+j]+=0.05
pos_ctrl.base6d_encoders.value = tuple(q)


from dynamic_graph.sot.torque_control.test_estimator import *
(estimator,torque_ctrl,traj_gen,ctrl_manager,inv_dyn,adm_ctrl) = main_pre_start('',robot,0.001,0.04);
(estimator,torque_ctrl,traj_gen,ctrl_manager,inv_dyn,adm_ctrl) = main_pre_start('torque_ctrl',robot,0.001,0.04);
(estimator,torque_ctrl,traj_gen,ctrl_manager,inv_dyn,adm_ctrl) = main_pre_start('identification',robot,0.001,0.1);
# main_pre_start(task,robot,dt=0.001,delay=0.01):

move_to_initial_configuration(traj_gen);
start_admittance_ctrl_RL(ctrl_manager);
traj_gen.moveForce('rf',2,50,5);
smoothly_set_signal_to_zero(inv_dyn.Kp);
traj_gen.startForceSinusoid('rf',2,100,3)
traj_gen.startForceSinusoid('rf',4,-10,3)
tracer = start_tracer(robot, estimator, torque_ctrl, traj_gen, ctrl_manager, inv_dyn, adm_ctrl);

ctrl_manager.max_delta_q.value=30*(0.1,)
traj_gen.playTrajectoryFile('/home/oramos/devel/ros-fuerte/src/sot/sot-torque-control/share/joint_traj/climbing32_1ms.pos')

ctrl_manager.setCtrlMode('rhp','torque')
tracer.start()
traj_gen.startLinChirp('rhp', -1.0, 0.3, 0.7, 40)
estimator.setUseFTsensors(True);
traj_gen.moveJoint('rhp',-1.5,3)

ctrl_manager.max_delta_q.value=30*(10000000,)
tauDes = 30*[0.0,];
torque_ctrl.jointsTorquesDesired.value = tuple(tauDes);
torque_ctrl.Kp.value = tuple(k_p);

# conservative, very stable
k_p[:] = 5.0;
estimator.init(0.001,0.04,0.04,0.04,0.04,True);

# more performant, less stable
k_p[:] = 10.0;
estimator.init(0.001,0.05,0.05,0.05,0.05,False);

# FORCE CONTROL EXPERIMENT
k_s[:6] = array([  9.6875,  69.375 ,  12.5   ,  40.8125,  11.875 ,   8.6875])
traj_gen.startForceSinusoid('rf',2,300,1.2)
traj_gen.startForceSinusoid('rf',4,-10,3)

# IDENTIFICATION OF RIGHT LEG JOINTS
traj_gen.moveJoint('lhr', 0.5, 3.0);    # move left leg out of the way

traj_gen.moveJoint('rhp', 0.0, 5.0);
traj_gen.startSinusoid('rhp', -1.0, 2.0);

traj_gen.moveJoint('rhr', -0.5, 3.0);
traj_gen.startSinusoid('rhr', 0.1, 1.2) # WARNING: THIS GOES AGAINST THE LEFT LEG

traj_gen.moveJoint('rhy', -0.5, 3.0);
traj_gen.moveJoint('rhr', -0.5, 3.0);
traj_gen.startSinusoid('rhy', 0.5, 1.5)

traj_gen.moveJoint('rk',0.1,3.0)
traj_gen.startSinusoid('rk', 2.0, 3.0)

traj_gen.moveJoint('rap', 0.6, 3.0);
traj_gen.startSinusoid('rap', -1.2, 1.5)

traj_gen.moveJoint('rar', 0.55, 3.0);
traj_gen.startSinusoid('rar', -0.3, 1.0);


tracer.start();
tracer = reset_tracer(robot,tracer)

