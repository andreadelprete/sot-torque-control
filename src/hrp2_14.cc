// Copyright 2014
// If you read this file you should have read and been given a copy of the closed license concerning HRP2
//

// This file has been generated by the metapod robotbuilder library.

#ifdef _MSC_VER
# pragma warning( push )
// The following warnings are only needed if the FloatType is float, because
// the code generator uses double anyway.
// disable warning C4305 truncation from 'double' to 'float'
// disable warning C4244 conversion from 'double' to 'float', possible loss of data
# pragma warning( disable: 4305 4244)
#endif

#include "metapod/models/hrp2_14/hrp2_14.hh"

namespace metapod {

  typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node0::joint_name = std::string("WAIST");
template <> const std::string hrp2_14<FloatType>::Node0::body_name = std::string("BODY");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node0::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node0::Node0():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node1::joint_name = std::string("RLEG_JOINT0");
template <> const std::string hrp2_14<FloatType>::Node1::body_name = std::string("RLEG_LINK0");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node1::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, -0.06, 0));
template <> hrp2_14<FloatType>::Node1::Node1():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node2::joint_name = std::string("RLEG_JOINT1");
template <> const std::string hrp2_14<FloatType>::Node2::body_name = std::string("RLEG_LINK1");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node2::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node2::Node2():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node3::joint_name = std::string("RLEG_JOINT2");
template <> const std::string hrp2_14<FloatType>::Node3::body_name = std::string("RLEG_LINK2");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node3::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node3::Node3():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node4::joint_name = std::string("RLEG_JOINT3");
template <> const std::string hrp2_14<FloatType>::Node4::body_name = std::string("RLEG_LINK3");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node4::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.3));
template <> hrp2_14<FloatType>::Node4::Node4():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node5::joint_name = std::string("RLEG_JOINT4");
template <> const std::string hrp2_14<FloatType>::Node5::body_name = std::string("RLEG_LINK4");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node5::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, -0.035, -0.3));
template <> hrp2_14<FloatType>::Node5::Node5():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node6::joint_name = std::string("RLEG_JOINT5");
template <> const std::string hrp2_14<FloatType>::Node6::body_name = std::string("r_ankle");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node6::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node6::Node6():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node7::joint_name = std::string("LLEG_JOINT0");
template <> const std::string hrp2_14<FloatType>::Node7::body_name = std::string("LLEG_LINK0");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node7::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0.06, 0));
template <> hrp2_14<FloatType>::Node7::Node7():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node8::joint_name = std::string("LLEG_JOINT1");
template <> const std::string hrp2_14<FloatType>::Node8::body_name = std::string("LLEG_LINK1");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node8::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node8::Node8():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node9::joint_name = std::string("LLEG_JOINT2");
template <> const std::string hrp2_14<FloatType>::Node9::body_name = std::string("LLEG_LINK2");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node9::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node9::Node9():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node10::joint_name = std::string("LLEG_JOINT3");
template <> const std::string hrp2_14<FloatType>::Node10::body_name = std::string("LLEG_LINK3");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node10::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.3));
template <> hrp2_14<FloatType>::Node10::Node10():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node11::joint_name = std::string("LLEG_JOINT4");
template <> const std::string hrp2_14<FloatType>::Node11::body_name = std::string("LLEG_LINK4");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node11::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0.035, -0.3));
template <> hrp2_14<FloatType>::Node11::Node11():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node12::joint_name = std::string("LLEG_JOINT5");
template <> const std::string hrp2_14<FloatType>::Node12::body_name = std::string("l_ankle");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node12::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node12::Node12():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node13::joint_name = std::string("CHEST_JOINT0");
template <> const std::string hrp2_14<FloatType>::Node13::body_name = std::string("CHEST_LINK0");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node13::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.032, 0, 0.3507));
template <> hrp2_14<FloatType>::Node13::Node13():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node14::joint_name = std::string("CHEST_JOINT1");
template <> const std::string hrp2_14<FloatType>::Node14::body_name = std::string("torso");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node14::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node14::Node14():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node15::joint_name = std::string("HEAD_JOINT0");
template <> const std::string hrp2_14<FloatType>::Node15::body_name = std::string("HEAD_LINK0");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node15::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.007, 0, 0.2973));
template <> hrp2_14<FloatType>::Node15::Node15():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node16::joint_name = std::string("HEAD_JOINT1");
template <> const std::string hrp2_14<FloatType>::Node16::body_name = std::string("HEAD_LINK1");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node16::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node16::Node16():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node17::joint_name = std::string("RARM_JOINT0");
template <> const std::string hrp2_14<FloatType>::Node17::body_name = std::string("RARM_LINK0");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node17::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.008, -0.25, 0.181));
template <> hrp2_14<FloatType>::Node17::Node17():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node18::joint_name = std::string("RARM_JOINT1");
template <> const std::string hrp2_14<FloatType>::Node18::body_name = std::string("RARM_LINK1");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node18::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node18::Node18():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node19::joint_name = std::string("RARM_JOINT2");
template <> const std::string hrp2_14<FloatType>::Node19::body_name = std::string("RARM_LINK2");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node19::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node19::Node19():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node20::joint_name = std::string("RARM_JOINT3");
template <> const std::string hrp2_14<FloatType>::Node20::body_name = std::string("RARM_LINK3");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node20::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.25));
template <> hrp2_14<FloatType>::Node20::Node20():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node21::joint_name = std::string("RARM_JOINT4");
template <> const std::string hrp2_14<FloatType>::Node21::body_name = std::string("RARM_LINK4");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node21::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.25));
template <> hrp2_14<FloatType>::Node21::Node21():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node22::joint_name = std::string("RARM_JOINT5");
template <> const std::string hrp2_14<FloatType>::Node22::body_name = std::string("r_wrist");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node22::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node22::Node22():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node23::joint_name = std::string("RARM_JOINT6");
template <> const std::string hrp2_14<FloatType>::Node23::body_name = std::string("RARM_LINK6");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node23::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0.02, -0.095));
template <> hrp2_14<FloatType>::Node23::Node23():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node24::joint_name = std::string("LARM_JOINT0");
template <> const std::string hrp2_14<FloatType>::Node24::body_name = std::string("LARM_LINK0");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node24::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.008, 0.25, 0.181));
template <> hrp2_14<FloatType>::Node24::Node24():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node25::joint_name = std::string("LARM_JOINT1");
template <> const std::string hrp2_14<FloatType>::Node25::body_name = std::string("LARM_LINK1");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node25::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node25::Node25():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node26::joint_name = std::string("LARM_JOINT2");
template <> const std::string hrp2_14<FloatType>::Node26::body_name = std::string("LARM_LINK2");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node26::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node26::Node26():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node27::joint_name = std::string("LARM_JOINT3");
template <> const std::string hrp2_14<FloatType>::Node27::body_name = std::string("LARM_LINK3");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node27::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.25));
template <> hrp2_14<FloatType>::Node27::Node27():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node28::joint_name = std::string("LARM_JOINT4");
template <> const std::string hrp2_14<FloatType>::Node28::body_name = std::string("LARM_LINK4");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node28::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.25));
template <> hrp2_14<FloatType>::Node28::Node28():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node29::joint_name = std::string("LARM_JOINT5");
template <> const std::string hrp2_14<FloatType>::Node29::body_name = std::string("l_wrist");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node29::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp2_14<FloatType>::Node29::Node29():
  joint() {}

typedef double FloatType;
template <> const std::string hrp2_14<FloatType>::Node30::joint_name = std::string("LARM_JOINT6");
template <> const std::string hrp2_14<FloatType>::Node30::body_name = std::string("LARM_LINK6");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp2_14<FloatType>::Node30::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, -0.02, -0.095));
template <> hrp2_14<FloatType>::Node30::Node30():
  joint(-1, 0, 0) {}




  template <> Spatial::InertiaTpl<FloatType> hrp2_14<FloatType>::inertias[] = {
        spatialInertiaMaker<FloatType>(
        15.0295,
        Vector3dTpl<FloatType>::Type(-0.0143514, 1.2e-07, 0.223077),
        matrix3dMaker<FloatType>(0.161026, -2.6e-07, 0.00070696, -2.6e-07, 0.09528, -1.9e-07, 0.00070696, -1.9e-07, 0.191914)),
    spatialInertiaMaker<FloatType>(
        1.23548,
        Vector3dTpl<FloatType>::Type(-0.0107034, 0.00460716, 0.0674455),
        matrix3dMaker<FloatType>(0.00304689, -1.558e-05, -0.00055077, -1.558e-05, 0.00375305, 2.25e-05, -0.00055077, 2.25e-05, 0.00153874)),
    spatialInertiaMaker<FloatType>(
        0.80553,
        Vector3dTpl<FloatType>::Type(-0.00039826, -0.0261287, -0.00292156),
        matrix3dMaker<FloatType>(0.00126683, 1.211e-05, 1.64e-06, 1.211e-05, 0.00050656, 6.938e-05, 1.64e-06, 6.938e-05, 0.00132021)),
    spatialInertiaMaker<FloatType>(
        2.07632,
        Vector3dTpl<FloatType>::Type(0.00345946, -0.0779422, -0.151684),
        matrix3dMaker<FloatType>(0.0261976, -3.954e-05, 0.00057351, -3.954e-05, 0.0249235, 0.00067007, 0.00057351, 0.00067007, 0.00376439)),
    spatialInertiaMaker<FloatType>(
        1.74762,
        Vector3dTpl<FloatType>::Type(0.0179878, -0.0579164, -0.13839),
        matrix3dMaker<FloatType>(0.0223268, -9.393e-05, -0.00224776, -9.393e-05, 0.022506, -0.00074527, -0.00224776, -0.00074527, 0.00455443)),
    spatialInertiaMaker<FloatType>(
        0.65375,
        Vector3dTpl<FloatType>::Type(0.00827083, -0.00133301, -0.002418),
        matrix3dMaker<FloatType>(0.00027773, -5.26e-06, 1.354e-05, -5.26e-06, 0.00078966, -3.59e-06, 1.354e-05, -3.59e-06, 0.00086039)),
    spatialInertiaMaker<FloatType>(
        1.63877,
        Vector3dTpl<FloatType>::Type(-0.00066419, -0.00468922, -0.0653813),
        matrix3dMaker<FloatType>(0.00400076, 9.983e-05, 0.00079295, 9.983e-05, 0.00687611, -0.00018541, 0.00079295, -0.00018541, 0.00711516)),
    spatialInertiaMaker<FloatType>(
        1.23548,
        Vector3dTpl<FloatType>::Type(-0.0107034, -0.00460716, 0.0674455),
        matrix3dMaker<FloatType>(0.00304689, 1.558e-05, -0.00055077, 1.558e-05, 0.00375305, -2.25e-05, -0.00055077, -2.25e-05, 0.00153874)),
    spatialInertiaMaker<FloatType>(
        0.80553,
        Vector3dTpl<FloatType>::Type(-0.00039826, 0.0261287, -0.00292156),
        matrix3dMaker<FloatType>(0.00126683, -1.211e-05, 1.64e-06, -1.211e-05, 0.00050656, -6.938e-05, 1.64e-06, -6.938e-05, 0.00132021)),
    spatialInertiaMaker<FloatType>(
        2.07632,
        Vector3dTpl<FloatType>::Type(0.00345946, 0.0779422, -0.151684),
        matrix3dMaker<FloatType>(0.0261976, 3.954e-05, 0.00057351, 3.954e-05, 0.0249235, -0.00067007, 0.00057351, -0.00067007, 0.00376439)),
    spatialInertiaMaker<FloatType>(
        1.74762,
        Vector3dTpl<FloatType>::Type(0.0179878, 0.0579164, -0.13839),
        matrix3dMaker<FloatType>(0.0223268, 9.393e-05, -0.00224776, 9.393e-05, 0.022506, 0.00074527, -0.00224776, 0.00074527, 0.00455443)),
    spatialInertiaMaker<FloatType>(
        0.65375,
        Vector3dTpl<FloatType>::Type(0.00827083, 0.00133301, -0.002418),
        matrix3dMaker<FloatType>(0.00027773, 5.26e-06, 1.354e-05, 5.26e-06, 0.00078966, 3.59e-06, 1.354e-05, 3.59e-06, 0.00086039)),
    spatialInertiaMaker<FloatType>(
        1.63877,
        Vector3dTpl<FloatType>::Type(-0.00066419, 0.00468922, -0.0653813),
        matrix3dMaker<FloatType>(0.00400076, -9.983e-05, 0.00079295, -9.983e-05, 0.00687611, 0.00018541, 0.00079295, 0.00018541, 0.00711516)),
    spatialInertiaMaker<FloatType>(
        0.786369,
        Vector3dTpl<FloatType>::Type(-0.0158016, 0.00529544, -0.0251963),
        matrix3dMaker<FloatType>(0.00181617, -7.322e-05, -0.00027731, -7.322e-05, 0.00185079, -0.00010749, -0.00027731, -0.00010749, 0.00233207)),
    spatialInertiaMaker<FloatType>(
        11.5246,
        Vector3dTpl<FloatType>::Type(-0.0290496, 0.00716411, 0.121025),
        matrix3dMaker<FloatType>(0.160476, -0.00135932, -0.00414493, -0.00135932, 0.136846, 0.00388035, -0.00414493, 0.00388035, 0.181669)),
    spatialInertiaMaker<FloatType>(
        0.374766,
        Vector3dTpl<FloatType>::Type(-0.00087533, 0.00426199, -0.00802747),
        matrix3dMaker<FloatType>(0.00039945, -9.9e-07, 2.26e-06, -9.9e-07, 0.00022558, -1.181e-05, 2.26e-06, -1.181e-05, 0.00036246)),
    spatialInertiaMaker<FloatType>(
        0.993355,
        Vector3dTpl<FloatType>::Type(0.0129885, 8.605e-05, 0.0787606),
        matrix3dMaker<FloatType>(0.00539717, -2.165e-05, 0.0006933, -2.165e-05, 0.00457493, -6.372e-05, 0.0006933, -6.372e-05, 0.00590682)),
    spatialInertiaMaker<FloatType>(
        0.810076,
        Vector3dTpl<FloatType>::Type(-0.00989448, 0.0464526, -0.00015316),
        matrix3dMaker<FloatType>(0.00221115, -0.00030424, 1.47e-06, -0.00030424, 0.00184189, 4.667e-05, 1.47e-06, 4.667e-05, 0.00344772)),
    spatialInertiaMaker<FloatType>(
        1.03448,
        Vector3dTpl<FloatType>::Type(-0.0105646, -0.012043, -0.00948156),
        matrix3dMaker<FloatType>(0.00122098, 0.00028119, 9.407e-05, 0.00028119, 0.00172216, 0.00012041, 9.407e-05, 0.00012041, 0.00161319)),
    spatialInertiaMaker<FloatType>(
        1.59929,
        Vector3dTpl<FloatType>::Type(-0.00543072, -0.00479797, -0.166872),
        matrix3dMaker<FloatType>(0.00973049, -5.133e-05, -0.00019919, -5.133e-05, 0.00970372, 0.00013747, -0.00019919, 0.00013747, 0.00135331)),
    spatialInertiaMaker<FloatType>(
        0.77725,
        Vector3dTpl<FloatType>::Type(-9.27e-06, -0.0161684, -0.0627015),
        matrix3dMaker<FloatType>(0.00232668, 7e-08, -3.1e-07, 7e-08, 0.00212476, 0.00015097, -3.1e-07, 0.00015097, 0.00056363)),
    spatialInertiaMaker<FloatType>(
        0.554669,
        Vector3dTpl<FloatType>::Type(-0.00344863, -0.00361759, 0.0414959),
        matrix3dMaker<FloatType>(0.00132104, 1.646e-05, 4.66e-05, 1.646e-05, 0.0011992, -0.00011959, 4.66e-05, -0.00011959, 0.00031715)),
    spatialInertiaMaker<FloatType>(
        0.573818,
        Vector3dTpl<FloatType>::Type(0.0001739, 0.0042575, -0.0582954),
        matrix3dMaker<FloatType>(0.00093849, -5.48e-06, -8.17e-06, -5.48e-06, 0.00102565, -3.239e-05, -8.17e-06, -3.239e-05, 0.00045951)),
    spatialInertiaMaker<FloatType>(
        0.0804856,
        Vector3dTpl<FloatType>::Type(0.011098, 0.00179647, -0.00593392),
        matrix3dMaker<FloatType>(3.264e-05, -2.07e-06, 5.83e-06, -2.07e-06, 3.628e-05, 5.63e-06, 5.83e-06, 5.63e-06, 1.981e-05)),
    spatialInertiaMaker<FloatType>(
        0.810076,
        Vector3dTpl<FloatType>::Type(-0.00989448, -0.0464526, -0.00015316),
        matrix3dMaker<FloatType>(0.00221115, 0.00030424, 1.47e-06, 0.00030424, 0.00184189, -4.667e-05, 1.47e-06, -4.667e-05, 0.00344772)),
    spatialInertiaMaker<FloatType>(
        1.03448,
        Vector3dTpl<FloatType>::Type(-0.0105646, 0.012043, -0.00948156),
        matrix3dMaker<FloatType>(0.00122098, -0.00028119, 9.407e-05, -0.00028119, 0.00172216, -0.00012041, 9.407e-05, -0.00012041, 0.00161319)),
    spatialInertiaMaker<FloatType>(
        1.59929,
        Vector3dTpl<FloatType>::Type(-0.00543072, 0.00479797, -0.166872),
        matrix3dMaker<FloatType>(0.00973049, 5.133e-05, -0.00019919, 5.133e-05, 0.00970372, -0.00013747, -0.00019919, -0.00013747, 0.00135331)),
    spatialInertiaMaker<FloatType>(
        0.77725,
        Vector3dTpl<FloatType>::Type(-9.27e-06, 0.0161684, -0.0627015),
        matrix3dMaker<FloatType>(0.00232668, -7e-08, -3.1e-07, -7e-08, 0.00212476, -0.00015097, -3.1e-07, -0.00015097, 0.00056363)),
    spatialInertiaMaker<FloatType>(
        0.554669,
        Vector3dTpl<FloatType>::Type(0.00247694, 0.00361759, 0.0414959),
        matrix3dMaker<FloatType>(0.00132103, 9.3e-06, -3.617e-05, 9.3e-06, 0.00119868, 0.00011959, -3.617e-05, 0.00011959, 0.00031664)),
    spatialInertiaMaker<FloatType>(
        0.573818,
        Vector3dTpl<FloatType>::Type(0.0001739, -0.0042575, -0.0582954),
        matrix3dMaker<FloatType>(0.00093849, 5.48e-06, -8.17e-06, 5.48e-06, 0.00102565, 3.239e-05, -8.17e-06, 3.239e-05, 0.00045951)),
    spatialInertiaMaker<FloatType>(
        0.0804856,
        Vector3dTpl<FloatType>::Type(0.011098, -0.00179647, -0.00593392),
        matrix3dMaker<FloatType>(3.264e-05, 2.07e-06, 5.83e-06, 2.07e-06, 3.628e-05, -5.63e-06, 5.83e-06, -5.63e-06, 1.981e-05)),
};

  template <> hrp2_14<FloatType>::VectorNBDOFf hrp2_14<FloatType>::fdNodesFirst = hrp2_14<FloatType>::VectorNBDOFf::Zero();
  template <> hrp2_14<FloatType>::VectorNBDOFf hrp2_14<FloatType>::idNodes = hrp2_14<FloatType>::VectorNBDOFf::Zero();
  template <> hrp2_14<FloatType>::PermutationMatrixNBDOFf hrp2_14<FloatType>::Q = hrp2_14<FloatType>::PermutationMatrixNBDOFf();
  template <> hrp2_14<FloatType>::PermutationMatrixNBDOFf hrp2_14<FloatType>::Qt = Q.transpose();
  template <> int hrp2_14<FloatType>::fdNodesFirstFillIndex = 0;
  template <> int hrp2_14<FloatType>::idNodesFillIndex = 0;
}

#ifdef _MSC_VER
# pragma warning( pop )
#endif

